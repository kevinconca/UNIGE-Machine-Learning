function merged_scores = merge_scores(scores, varargin)

if isstruct(scores); scores = {scores}; end

merged_scores = struct(...
    'accuracy', cell2mat( cellfun(@(x) x.accuracy, scores, 'UniformOutput', false) ),...
    'sensitivity', cell2mat( cellfun(@(x) x.sensitivity, scores, 'UniformOutput', false) ),...
    'specificity', cell2mat( cellfun(@(x) x.specificity, scores, 'UniformOutput', false) ),...
    'precision', cell2mat( cellfun(@(x) x.precision, scores, 'UniformOutput', false) ),...
    'recall', cell2mat( cellfun(@(x) x.recall, scores, 'UniformOutput', false) ),...
    'F1', cell2mat( cellfun(@(x) x.F1, scores, 'UniformOutput', false) ) ...
    );

opts = struct(varargin{:});
try
    if strcmpi(opts.print, 'yes')
        disp('Printing results...');
        fprintf('CV accuracy: %.2f +- %.2f\n', ...
            mean(merged_scores.accuracy), 2*std(merged_scores.accuracy))
        fprintf('CV sensitivity: %.2f +- %.2f\n', ...
            mean(merged_scores.sensitivity), 2*std(merged_scores.sensitivity))
        fprintf('CV specificity: %.2f +- %.2f\n', ...
            mean(merged_scores.specificity), 2*std(merged_scores.specificity))
        fprintf('CV precision: %.2f +- %.2f\n', ...
            mean(merged_scores.precision), 2*std(merged_scores.precision))
        fprintf('CV recall: %.2f +- %.2f\n', ...
            mean(merged_scores.recall), 2*std(merged_scores.recall))
        fprintf('CV F1: %.2f +- %.2f\n', ...
            mean(merged_scores.F1), 2*std(merged_scores.F1))
    end
catch
    % disp('No printing');
end

end